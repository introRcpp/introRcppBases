// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// a_rebours_1
void a_rebours_1(int n);
RcppExport SEXP _introRcppBases_a_rebours_1(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    a_rebours_1(n);
    return R_NilValue;
END_RCPP
}
// a_rebours_2
void a_rebours_2(int n);
RcppExport SEXP _introRcppBases_a_rebours_2(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    a_rebours_2(n);
    return R_NilValue;
END_RCPP
}
// arithmetic_overflow
void arithmetic_overflow();
RcppExport SEXP _introRcppBases_arithmetic_overflow() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    arithmetic_overflow();
    return R_NilValue;
END_RCPP
}
// bouclette
void bouclette(int n);
RcppExport SEXP _introRcppBases_bouclette(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    bouclette(n);
    return R_NilValue;
END_RCPP
}
// cast
void cast(int x, int y);
RcppExport SEXP _introRcppBases_cast(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    cast(x, y);
    return R_NilValue;
END_RCPP
}
// cast_to_int
int cast_to_int(int x);
RcppExport SEXP _introRcppBases_cast_to_int(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cast_to_int(x));
    return rcpp_result_gen;
END_RCPP
}
// combien
void combien(int n);
RcppExport SEXP _introRcppBases_combien(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    combien(n);
    return R_NilValue;
END_RCPP
}
// divise
double divise(double a, double b);
RcppExport SEXP _introRcppBases_divise(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(divise(a, b));
    return rcpp_result_gen;
END_RCPP
}
// division_entiere
void division_entiere(int a, int b);
RcppExport SEXP _introRcppBases_division_entiere(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    division_entiere(a, b);
    return R_NilValue;
END_RCPP
}
// float_types
void float_types();
RcppExport SEXP _introRcppBases_float_types() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    float_types();
    return R_NilValue;
END_RCPP
}
// hello
void hello();
RcppExport SEXP _introRcppBases_hello() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    hello();
    return R_NilValue;
END_RCPP
}
// int_types
void int_types();
RcppExport SEXP _introRcppBases_int_types() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    int_types();
    return R_NilValue;
END_RCPP
}
// mini
double mini(double x, double y);
RcppExport SEXP _introRcppBases_mini(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(mini(x, y));
    return rcpp_result_gen;
END_RCPP
}
// non_signes
void non_signes();
RcppExport SEXP _introRcppBases_non_signes() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    non_signes();
    return R_NilValue;
END_RCPP
}
// numeric_limits
void numeric_limits();
RcppExport SEXP _introRcppBases_numeric_limits() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    numeric_limits();
    return R_NilValue;
END_RCPP
}
// operateurs_exotiques
void operateurs_exotiques(int a);
RcppExport SEXP _introRcppBases_operateurs_exotiques(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    operateurs_exotiques(a);
    return R_NilValue;
END_RCPP
}
// overflow
void overflow();
RcppExport SEXP _introRcppBases_overflow() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    overflow();
    return R_NilValue;
END_RCPP
}
// petit_tableau
void petit_tableau();
RcppExport SEXP _introRcppBases_petit_tableau() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    petit_tableau();
    return R_NilValue;
END_RCPP
}
// somme_entiers
int somme_entiers(int a, int b);
RcppExport SEXP _introRcppBases_somme_entiers(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(somme_entiers(a, b));
    return rcpp_result_gen;
END_RCPP
}
// squareRoot
double squareRoot(double x, double eps);
RcppExport SEXP _introRcppBases_squareRoot(SEXP xSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(squareRoot(x, eps));
    return rcpp_result_gen;
END_RCPP
}
// test_interval
bool test_interval(double x, double min, double max);
RcppExport SEXP _introRcppBases_test_interval(SEXP xSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type min(minSEXP);
    Rcpp::traits::input_parameter< double >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_interval(x, min, max));
    return rcpp_result_gen;
END_RCPP
}
// test_positif
bool test_positif(double x);
RcppExport SEXP _introRcppBases_test_positif(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(test_positif(x));
    return rcpp_result_gen;
END_RCPP
}
// trois
void trois(int n);
RcppExport SEXP _introRcppBases_trois(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    trois(n);
    return R_NilValue;
END_RCPP
}
// uninit
int uninit();
RcppExport SEXP _introRcppBases_uninit() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(uninit());
    return rcpp_result_gen;
END_RCPP
}
// vec0
Rcpp::NumericVector vec0(int n);
RcppExport SEXP _introRcppBases_vec0(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(vec0(n));
    return rcpp_result_gen;
END_RCPP
}
// vec1
Rcpp::IntegerVector vec1(int n);
RcppExport SEXP _introRcppBases_vec1(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(vec1(n));
    return rcpp_result_gen;
END_RCPP
}
// ze_loop
void ze_loop(int n);
RcppExport SEXP _introRcppBases_ze_loop(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    ze_loop(n);
    return R_NilValue;
END_RCPP
}
// zz
void zz(int n, int z);
RcppExport SEXP _introRcppBases_zz(SEXP nSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type z(zSEXP);
    zz(n, z);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_introRcppBases_a_rebours_1", (DL_FUNC) &_introRcppBases_a_rebours_1, 1},
    {"_introRcppBases_a_rebours_2", (DL_FUNC) &_introRcppBases_a_rebours_2, 1},
    {"_introRcppBases_arithmetic_overflow", (DL_FUNC) &_introRcppBases_arithmetic_overflow, 0},
    {"_introRcppBases_bouclette", (DL_FUNC) &_introRcppBases_bouclette, 1},
    {"_introRcppBases_cast", (DL_FUNC) &_introRcppBases_cast, 2},
    {"_introRcppBases_cast_to_int", (DL_FUNC) &_introRcppBases_cast_to_int, 1},
    {"_introRcppBases_combien", (DL_FUNC) &_introRcppBases_combien, 1},
    {"_introRcppBases_divise", (DL_FUNC) &_introRcppBases_divise, 2},
    {"_introRcppBases_division_entiere", (DL_FUNC) &_introRcppBases_division_entiere, 2},
    {"_introRcppBases_float_types", (DL_FUNC) &_introRcppBases_float_types, 0},
    {"_introRcppBases_hello", (DL_FUNC) &_introRcppBases_hello, 0},
    {"_introRcppBases_int_types", (DL_FUNC) &_introRcppBases_int_types, 0},
    {"_introRcppBases_mini", (DL_FUNC) &_introRcppBases_mini, 2},
    {"_introRcppBases_non_signes", (DL_FUNC) &_introRcppBases_non_signes, 0},
    {"_introRcppBases_numeric_limits", (DL_FUNC) &_introRcppBases_numeric_limits, 0},
    {"_introRcppBases_operateurs_exotiques", (DL_FUNC) &_introRcppBases_operateurs_exotiques, 1},
    {"_introRcppBases_overflow", (DL_FUNC) &_introRcppBases_overflow, 0},
    {"_introRcppBases_petit_tableau", (DL_FUNC) &_introRcppBases_petit_tableau, 0},
    {"_introRcppBases_somme_entiers", (DL_FUNC) &_introRcppBases_somme_entiers, 2},
    {"_introRcppBases_squareRoot", (DL_FUNC) &_introRcppBases_squareRoot, 2},
    {"_introRcppBases_test_interval", (DL_FUNC) &_introRcppBases_test_interval, 3},
    {"_introRcppBases_test_positif", (DL_FUNC) &_introRcppBases_test_positif, 1},
    {"_introRcppBases_trois", (DL_FUNC) &_introRcppBases_trois, 1},
    {"_introRcppBases_uninit", (DL_FUNC) &_introRcppBases_uninit, 0},
    {"_introRcppBases_vec0", (DL_FUNC) &_introRcppBases_vec0, 1},
    {"_introRcppBases_vec1", (DL_FUNC) &_introRcppBases_vec1, 1},
    {"_introRcppBases_ze_loop", (DL_FUNC) &_introRcppBases_ze_loop, 1},
    {"_introRcppBases_zz", (DL_FUNC) &_introRcppBases_zz, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_introRcppBases(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
